name: Bump Version

on:
  schedule:
    - cron: 0 0 * * *
  workflow_dispatch:

jobs:
  bump:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_KEY }}
          fetch-depth: 0
      -
        name: Bump
        run: |
          git config --global user.name github-actions\[bot\]
          git config --global user.email github-actions\[bot\]@users.noreply.github.com
          versions=$(git branch -r --format='%(refname:short)' | sed -e 's/origin\///' | grep -v main | sort -t '.' -k 1,1n)
          for branch in $versions
          do
            echo git checkout $branch | tee /dev/stderr | source /dev/stdin
            version=$(
              curl -fsSL -H 'Accept: application/vnd.github+json' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' https://api.github.com/repos/opencv/opencv/releases |
              jq -r '.[].tag_name' |
              sed -e /$(git describe --tags --abbrev=0)/q |
              sed -e \$d |
              grep ^$(git symbolic-ref --short HEAD | sed -e s/\\.x//)\\.\[0-9\]\[0-9\]\*\\.\[0-9\]\[0-9\]\*$ |
              tail -n 1
            )
            if test -n "$version"
            then
              echo $version
              echo curl -fsSLO https://github.com/opencv/opencv/releases/download/${version}/opencv-${version}-ios-framework.zip | tee /dev/stderr | source /dev/stdin
              echo unzip opencv-${version}-ios-framework.zip | tee /dev/stderr | source /dev/stdin
              sed -i -e /s.swift_version/d *.podspec
              if test $(find opencv2.framework/Modules/opencv2.swiftmodule -type f -name \*.swiftmodule | wc -l) -gt 0
              then
                sed -i -e /s.requires_arc/s/false/true/ *.podspec
                if test $(find opencv2.framework/Modules/opencv2.swiftmodule -type f -name \*.swiftinterface | wc -l) -gt 0
                then
                  swift_version=$(grep -Po '(?<=Swift version )[0-9][0-9]*\.[0-9][0-9]*' $(find opencv2.framework/Modules/opencv2.swiftmodule -type f -name \*.swiftinterface | head -n 1))
                  case $swift_version in
                    5.3 ) xcode_version=12.5.1 ;;
                    5.4 ) xcode_version=12.5.1 ;;
                    5.5 ) xcode_version=13.4.1 ;;
                    5.6 ) xcode_version=13.4.1 ;;
                    5.7 ) xcode_version=14.3.1 ;;
                    5.8 ) xcode_version=14.3.1 ;;
                    * ) xcode_version=11.7.0 ;;
                  esac
                  case $xcode_version in
                    12.5.1 ) macos_version=11 ;;
                    13.4.1 ) macos_version=12 ;;
                    14.3.1 ) macos_version=13 ;;
                    * ) macos_version=11 ;;
                  esac
                  if test ${xcode_version%%.*} -ge 12
                  then
                    sed -i -e /target_xcconfig/d *.podspec
                    sed -i -e $'/^end$/i\\\n  s.pod_target_xcconfig = { "EXCLUDED_ARCHS[sdk=iphonesimulator*]" => "arm64" }' *.podspec
                    sed -i -e $'/^end$/i\\\n  s.user_target_xcconfig = { "EXCLUDED_ARCHS[sdk=iphonesimulator*]" => "arm64" }' *.podspec
                  fi
                  sed -i -e s/Xcode_\[0-9.\]\*\[0-9\]/Xcode_$xcode_version/ .github/workflows/push.yml
                  sed -i -e s/macos-\[0-9.\]\*\[0-9\]/macos-$macos_version/ .github/workflows/push.yml
                  sed -i -e $'/s.requires_arc/a\\\n  s.swift_version       = "'$swift_version'"' *.podspec
                else
                  sed -i -e $'/s.requires_arc/a\\\n  s.swift_version       = "5.0"' *.podspec
                fi
              fi
              rm -fr opencv2.framework opencv-${version}-ios-framework.zip
              sed -i -e s/\[0-9\]\[0-9\]\*\\.\[0-9\]\[0-9\]\*\\.\[0-9\]\[0-9\]\*/$version/ *.podspec
              sed -i -e s/\[0-9\]\[0-9\]\*\\.\[0-9\]\[0-9\]\*\\.\[0-9\]\[0-9\]\*/$version/ README.md
              echo git add .github/workflows/push.yml *.podspec README.md | tee /dev/stderr | source /dev/stdin
              echo git commit -m \"Bump version to $version\" | tee /dev/stderr | source /dev/stdin
              echo git tag $version | tee /dev/stderr | source /dev/stdin
              echo git push origin | tee /dev/stderr | source /dev/stdin
              echo git push origin --tags | tee /dev/stderr | source /dev/stdin
              sleep 120
            fi
          done
          echo git checkout main | tee /dev/stderr | source /dev/stdin
          echo git merge --no-ff --no-edit $(echo $versions | awk 'END{print $NF}') | tee /dev/stderr | source /dev/stdin
          echo git push origin | tee /dev/stderr | source /dev/stdin
